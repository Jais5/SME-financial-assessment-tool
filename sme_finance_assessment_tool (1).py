# -*- coding: utf-8 -*-
"""SME FINANCE ASSESSMENT TOOL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qR7amR-yUbCBT2PwFNub-Z1mMvwoptRV
"""

!pip install pandas fpdf matplotlib openai --quiet

import pandas as pd
from fpdf import FPDF
import matplotlib.pyplot as plt
import openai
from google.colab import files

# Step 3: Set your GPT-4 API key
openai.api_key = "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"

uploaded = files.upload()
file_name = list(uploaded.keys())[0]

df = pd.read_csv(file_name, parse_dates=['Date'])

# Step 6: Calculate key financial metrics
df['Net_Income'] = df['Revenue'] - df['Expenses']
df['Profit_Margin'] = df['Net_Income'] / df['Revenue']
df['Current_Ratio'] = df['Assets'] / df['Liabilities']
df['Working_Capital'] = df['Assets'] - df['Liabilities']

metrics_summary = f"""
Financial Metrics Summary:
Total Revenue: ₹{df['Revenue'].sum():,.0f}
Total Expenses: ₹{df['Expenses'].sum():,.0f}
Total Net Income: ₹{df['Net_Income'].sum():,.0f}
Average Profit Margin: {df['Profit_Margin'].mean():.2%}
Average Current Ratio: {df['Current_Ratio'].mean():.2f}
Average Working Capital: ₹{df['Working_Capital'].mean():,.0f}
"""

prompt = f"""
You are an AI financial analyst for SMEs.
Analyze the following financial metrics and provide:

- Financial health summary
- Creditworthiness & risk score
- Cost-cutting suggestions
- Recommended financial products

Metrics:
{metrics_summary}
"""

!pip install --upgrade openai

import openai

openai.api_key = "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"

gpt_report_text = """
[MOCK GPT REPORT]
Financial health is stable.
Creditworthiness is good.
Consider reducing marketing and inventory costs.
Eligible for a working capital loan of ₹7.5L.
"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10,5))
plt.plot(df['Date'], df['Revenue'], label='Revenue', marker='o')
plt.plot(df['Date'], df['Expenses'], label='Expenses', marker='o')
plt.plot(df['Date'], df['Net_Income'], label='Net Income', marker='o')
plt.legend()
plt.title("Financial Trends")
plt.xlabel("Date")
plt.ylabel("Amount")
plt.grid(True)
plt.show()

plt.savefig("financial_trends.png")

# Step 9: Automated recommendations and risk scoring

def financial_health_analysis(df):
    # Initialize report
    report = ""

    # Profitability check
    avg_profit_margin = df['Profit_Margin'].mean()
    if avg_profit_margin > 0.2:
        report += "✅ Profit margins are healthy.\n"
    elif avg_profit_margin > 0.1:
        report += "⚠️ Profit margins are moderate; monitor costs.\n"
    else:
        report += "❌ Profit margins are low; urgent cost optimization needed.\n"

    # Liquidity check (Current Ratio)
    avg_current_ratio = df['Current_Ratio'].mean()
    if avg_current_ratio > 1.5:
        report += "✅ Liquidity is strong.\n"
    elif avg_current_ratio > 1.0:
        report += "⚠️ Liquidity is moderate; watch payables.\n"
    else:
        report += "❌ Liquidity is weak; risk of short-term cash issues.\n"

    # Working capital trends
    avg_wc = df['Working_Capital'].mean()
    if avg_wc < 0:
        report += "❌ Working capital is negative; consider short-term financing.\n"
    else:
        report += f"✅ Average Working Capital: ₹{avg_wc:,.0f}\n"

    # Cost-cutting suggestions
    high_expense_months = df[df['Expenses'] > df['Revenue']*0.7]
    if not high_expense_months.empty:
        report += "⚠️ Some months have high expenses (>70% of revenue). Review marketing & inventory costs.\n"

    # Creditworthiness recommendation (simple rule)
    if avg_profit_margin > 0.15 and avg_current_ratio > 1.2:
        report += "✅ Eligible for working capital loan up to ₹7.5L.\n"
    else:
        report += "⚠️ May need to improve profitability or liquidity before applying for loans.\n"

    return report

# Generate automated report
automated_report = financial_health_analysis(df)
print("\n--- Automated Financial Health Report ---\n")
print(automated_report)

financial_data = {
    "metrics_summary": metrics_summary,
    "automated_report": automated_report,
    "trend_df": df  # for charts
}

# Save metrics
metrics_export = df.copy()
metrics_export['Profit_Margin'] = df['Profit_Margin']
metrics_export['Current_Ratio'] = df['Current_Ratio']
metrics_export['Working_Capital'] = df['Working_Capital']

metrics_export.to_csv("SME_Financial_Metrics.csv", index=False)
print("✅ Metrics exported to SME_Financial_Metrics.csv")

plt.savefig("financial_trends.png")

df['Profitability_Flag'] = df['Profit_Margin'].apply(lambda x: 'Healthy' if x>0.2 else 'Moderate' if x>0.1 else 'Low')
df['Liquidity_Flag'] = df['Current_Ratio'].apply(lambda x: 'Strong' if x>1.5 else 'Moderate' if x>1.0 else 'Weak')